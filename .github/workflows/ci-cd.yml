name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Build-Spring-boot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Upload JAR as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/demo-0.0.1-SNAPSHOT.jar

  Deploy_image_ECR:
    needs: Build-Spring-boot
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download JAR from Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Authenticate to AWS Public ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/q0j4m6z6

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      - name: Push Docker Image to AWS Public ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

  Deploy_to_EC2:
    needs: Deploy_image_ECR
    runs-on: ubuntu-latest

    steps:
      - name: Connect to EC2 & Deploy Docker Image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo -i
            
            echo "Logging into AWS ECR..."
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/q0j4m6z6

            echo "Pulling latest image from AWS ECR..."
            sudo docker pull ${{ secrets.ECR_REPOSITORY }}:latest

            sudo docker stop my-spring-app || true
            sudo docker rm my-spring-app || true

            echo "Running the new container..."
            sudo docker run -d --name my-spring-app -p 9090:8080 ${{ secrets.ECR_REPOSITORY }}:latest
